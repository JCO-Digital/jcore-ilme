/*
 * Bootstrap Mixins
 */

@use "sass:math";

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}
// Modified version that calculates the widths based on narrow cols.
@mixin make-container-narrow-widths($cols: $container-narrow-cols, $max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width * math.div(map_get($cols, $breakpoint), 12);
    }
  }
}

// Set vertical paddings for groups.
@mixin make-group-padding($paddings: $group-paddings) {
  @each $bp, $padding in $paddings {
    @if ($bp == 'xs') {
      padding-top: $padding;
      padding-bottom: $padding;
    } @else {
      @include media-breakpoint-up($bp) {
        padding-top: $padding;
        padding-bottom: $padding;
      }
    }
  }
}

// Perfect square mixin
@mixin perfect-square() {
  .perfect-square {
    position: relative;
    width: 100%;
  }
  .perfect-square:after {
    content: "";
    display: block;
    padding-bottom: 100%;
  }
  .perfect-square.wide:after {
    padding-bottom: 64.3%;
  }
  .perfect-square img {
    position: absolute;
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .perfect-square img.landscape {
    width: 100%;
  }
}
